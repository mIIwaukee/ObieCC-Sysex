selected = 0
progNum = 1
bankNum = 0

function setProg(ValueObject, value)
   progNum = value
end


function setBank(ValueObject, value)
   bankNum = value
end


function selectIt(ValueObject, Value)
   midi.sendControlChange(PORT_1, 1, 32, bankNum)
   midi.sendProgramChange (PORT_1, 1, progNum)

   selected = 1

   local sysexMsg = {0, 0, 0x0E, 0x22, 0x41, bankNum, 0, progNum}
   midi.sendSysex (PORT_1, sysexMsg)
end


--function onButtonDown(buttonId)
--   if (buttonId == BUTTON_4) and (selected == 0) then
--   end
--end

function patch.onRequest (device)
--   print (string.format("Requesting current patch: Bank = %d, Prog = %d", bankNum, progNum))

   sysexMsg = {0, 0, 0x0E, 0x22, 0x41, bankNum, 0, progNum}
   midi.sendSysex (PORT_1, sysexMsg)
end


function patch.onResponse (device, responseId, sysexBlock)
--    print ("Received sysex, length = " .. sysexBlock:getLength ())

    local skipBytes = 74
    local deSyx = {}
    local topBits
    local highBit
    local k = 1

    -- decode the received data, starting after header data
   sysexBlock:seek(skipBytes)
    for i = 1, (sysexBlock:getLength () - skipBytes), 8 do
       topBits = sysexBlock:read()
       for j = 1, 7 do
          highBit = ((topBits << j) & 0x80)
          deSyx[k] = (highBit | sysexBlock:read())
          k = k + 1
       end
    end

    showPgmName(deSyx)
    updVoiceVals(deSyx)
    updOscillators(deSyx)
    updPreFilter(deSyx)
    updFilters(deSyx)
    updPostFilter(deSyx)
    updOutput(deSyx)
    updEnvelopes(deSyx)
    updLFOs(deSyx)
    updModMatrix(deSyx)
    updTrackingGen(deSyx)
    collectgarbage("collect") 
end

function decode100(curVal)
   if (curVal > 127) then
      retVal = curVal | 0x3f00
   else
      retVal = curVal
   end
   return retVal
end


function make16(big, little)
   retVal = (((big & 0x00FF) << 8) | (little & 0x00FF)) & 0x3FFF
   return retVal
end


function decodeOct(curVal)
   retVal = curVal & 0x07
   if retVal < 3 then
      retVal = 0x3FFD + retVal
   else
      retVal = retVal - 3
   end   
   return retVal
end


function decodeSemi(curVal)
   retVal = (curVal & 0xF0) >> 4
   if retVal < 7 then
      retVal = 0x3FF9 + retVal
   else
      retVal = retVal - 7
   end   
   return retVal
end


function showPgmName(syxBuf)
    local group = groups.get(1)
    local theLabel = group:getLabel()

    if (theLabel == "OSCILLATOR") or (string.find(theLabel, "----")) then
       local x=1
       local pgmName = ""
       while ((x < 15) and (syxBuf[x] ~= 0)) do
           pgmName = pgmName .. string.format("%c", syxBuf[x])
           x = x + 1
       end
       local newLabel = string.format("%s ---- %s", pgmName, "Oscillator 1")
       group:setLabel(newLabel)
    end
end

function updVoiceVals(syxBuf)
   -- poly/mono, unison voices, portamento type
   parameterMap.set(1, PT_NRPN, 0, (syxBuf[16] & 0x01))
   parameterMap.set(1, PT_NRPN, 1, ((syxBuf[16] & 0x0C) >> 2) + (1 - ((syxBuf[16] & 0x02) >> 1)))
   parameterMap.set(1, PT_NRPN, 4, ((syxBuf[16] & 0xC0) >> 6))

   -- unison detune, portamento
   parameterMap.set(1, PT_NRPN, 2, (syxBuf[17] & 0x7F))

   -- do the same thing by just assigning 3 to syxBuf[20] & 0x01 ?
   local prtOnOff = (syxBuf[17] & 0x80) >> 7
   -- 0 is on, 1 is off
   if (prtOnOff == 1) then
      parameterMap.set(1, PT_NRPN, 3, 0)
   else
      parameterMap.set(1, PT_NRPN, 3, (syxBuf[20] & 0x01))
   end

   -- portamento time, pitch wheel mode, analog drift
   parameterMap.set(1, PT_NRPN, 5, syxBuf[18])
   parameterMap.set(1, PT_NRPN, 6, (syxBuf[19] & 0x01))
   parameterMap.set(1, PT_NRPN, 7, syxBuf[21])

   -- FM type/algorithm
   local newVal = 2 - ((syxBuf[36] & 0x08) >> 2)
   if ((syxBuf[37] & 0x80) > 0) then
      newVal = newVal + 3
   end
   parameterMap.set(1, PT_NRPN, 10, newVal)

   -- FM amount
   parameterMap.set(1, PT_NRPN, 9, make16(syxBuf[42], syxBuf[43]))

end

function updOscillators(syxBuf)
   -- oscillator 1 waveform, shape, octave, semi-tone transpose, fine tune, pitch bend range
   parameterMap.set(1, PT_NRPN, 11, (syxBuf[35] & 0x03))
   parameterMap.set(1, PT_NRPN, 12, decode100(syxBuf[31]))
   parameterMap.set(1, PT_NRPN, 13, decodeOct(syxBuf[34]))
   parameterMap.set(1, PT_NRPN, 14, decodeSemi(syxBuf[34]))
   parameterMap.set(1, PT_NRPN, 15, make16(syxBuf[25], syxBuf[26]))
   parameterMap.set(1, PT_NRPN, 16, (syxBuf[35] & 0x3C) >> 2)

   -- oscillator 2 waveform, shape, octave, semi-tone transpose, fine tune, pitch bend range
   parameterMap.set(1, PT_NRPN, 17, (syxBuf[36] & 0x30) >> 4)
   parameterMap.set(1, PT_NRPN, 18, decode100(syxBuf[32]))
   parameterMap.set(1, PT_NRPN, 19, decodeOct(syxBuf[38]))
   parameterMap.set(1, PT_NRPN, 20, decodeSemi(syxBuf[38]))
   parameterMap.set(1, PT_NRPN, 21, make16(syxBuf[27], syxBuf[28]))
   parameterMap.set(1, PT_NRPN, 22, (syxBuf[40] & 0x0F))

   -- oscillator 3 waveform, shape, octave, semi-tone transpose, fine tune, pitch bend range
   parameterMap.set(1, PT_NRPN, 23, (syxBuf[36] & 0xC0) >> 6)
   parameterMap.set(1, PT_NRPN, 24, decode100(syxBuf[33]))
   parameterMap.set(1, PT_NRPN, 25, decodeOct(syxBuf[39]))
   parameterMap.set(1, PT_NRPN, 26, decodeSemi(syxBuf[39]))
   parameterMap.set(1, PT_NRPN, 27, make16(syxBuf[29], syxBuf[30]))
   parameterMap.set(1, PT_NRPN, 28, (syxBuf[40] & 0xF0) >> 4)

   -- oscillator sync - on/off, type, sync'd osc
   -- create some unique number from these 3 flags ([35] bits 8,7 and [36] bit 1)
   local syncVal = ((syxBuf[35] & 0xC0) >> 5) + (syxBuf[36] & 0x01)

   -- 0 is off when syncVal = 2
   local newVal = 0

   -- now the crazy mapping to match the Micron display
   if (syncVal == 1) or (syncVal == 4) then
      newVal = syncVal
   elseif syncVal == 5 then
      newVal = 2
   elseif syncVal == 0 then
      newVal = 3
   end
   parameterMap.set(1, PT_NRPN, 8, newVal)
end



function updPreFilter(syxBuf)
   -- Oscillator 1/2/3, RingMod, Ext In, F1 -> F2 levels 
   parameterMap.set(1, PT_NRPN, 29, syxBuf[46])
   parameterMap.set(1, PT_NRPN, 30, syxBuf[47])
   parameterMap.set(1, PT_NRPN, 31, syxBuf[48])
   parameterMap.set(1, PT_NRPN, 32, syxBuf[49])
   parameterMap.set(1, PT_NRPN, 34, syxBuf[50])
   parameterMap.set(1, PT_NRPN, 41, syxBuf[57])

   -- Noise level, type
   parameterMap.set(1, PT_NRPN, 33, (syxBuf[58] & 0x7F))
   parameterMap.set(1, PT_NRPN, 42, ((syxBuf[58] & 0x80) >> 7))

   -- Oscillator 1/2/3, RingMod, Noise balance, Ext In
   parameterMap.set(1, PT_NRPN, 35, decode100(syxBuf[51]))
   parameterMap.set(1, PT_NRPN, 36, decode100(syxBuf[52]))
   parameterMap.set(1, PT_NRPN, 37, decode100(syxBuf[53]))
   parameterMap.set(1, PT_NRPN, 38, decode100(syxBuf[54]))
   parameterMap.set(1, PT_NRPN, 39, decode100(syxBuf[56]))
   parameterMap.set(1, PT_NRPN, 40, decode100(syxBuf[55]))

end


function updFilters(syxBuf)

local filterMap = {0, 3, 1, 7, 11, 5, 2, 4, 6, 9, 8, 20, 16, 17, 13, 14, 15, 10, 12, 18, 19}

   -- filter 1 type, cutoff freq, resonance, keytrack, env amt
   parameterMap.set(1, PT_NRPN, 43, filterMap[syxBuf[77] + 1])
   parameterMap.set(1, PT_NRPN, 44, make16(syxBuf[64],syxBuf[65]))
   parameterMap.set(1, PT_NRPN, 45, syxBuf[68])
   parameterMap.set(1, PT_NRPN, 46, make16(syxBuf[72], syxBuf[73]))
   parameterMap.set(1, PT_NRPN, 47, decode100(syxBuf[70]))

   -- filter 2 offset/absolute, offset freq
   local toggle = 1 - (syxBuf[76] & 0x01)

   parameterMap.set(1, PT_NRPN, 48, toggle)
   parameterMap.set(1, PT_NRPN, 158, make16(syxBuf[79], syxBuf[80]))

   -- Trigger the filter control swap manually
   local absOffCtrl = controls.get(24)
   local absOffValObj = absOffCtrl:getValue("value")
   swapFilterCtrl(absOffValObj, toggle)

   -- filter 2 type, cutoff freq, resonance, keytrack, env amt
   parameterMap.set(1, PT_NRPN, 49, filterMap[syxBuf[78] + 1])
   parameterMap.set(1, PT_NRPN, 50, make16(syxBuf[66],syxBuf[67]))
   parameterMap.set(1, PT_NRPN, 51, syxBuf[69])
   parameterMap.set(1, PT_NRPN, 52, make16(syxBuf[74], syxBuf[75]))
   parameterMap.set(1, PT_NRPN, 53, decode100(syxBuf[71]))
end



function updPostFilter(syxBuf)
   -- F1, F2, unfiltered levels
   parameterMap.set(1, PT_NRPN, 54, syxBuf[84])
   parameterMap.set(1, PT_NRPN, 55, syxBuf[85])
   parameterMap.set(1, PT_NRPN, 56, syxBuf[86])

   -- unfiltered source, F1 sign
   parameterMap.set(1, PT_NRPN, 60, syxBuf[87])
   parameterMap.set(1, PT_NRPN, 61, syxBuf[88])

   -- F1, F2, Unfiltered Panning
   parameterMap.set(1, PT_NRPN, 57, decode100(syxBuf[89]))
   parameterMap.set(1, PT_NRPN, 58, decode100(syxBuf[90]))
   parameterMap.set(1, PT_NRPN, 59, decode100(syxBuf[91]))
end


function updOutput(syxBuf)
   -- Drive Type, drive level, Program level, FX Mix, FX 1/2 Balance
   parameterMap.set(1, PT_NRPN, 62, syxBuf[98])
   parameterMap.set(1, PT_NRPN, 63, syxBuf[97])
   parameterMap.set(1, PT_NRPN, 64, syxBuf[99])
   parameterMap.set(1, PT_NRPN, 65, decode100(syxBuf[281]))
   parameterMap.set(1, PT_NRPN, 230, decode100(syxBuf[290]))
end


function updEnvelopes(syxBuf)
   -- Env 1 Attack/Decay times, Sustain time/level, Release time, Vel -> E1, Attack/Decay/Release slopes
   parameterMap.set(1, PT_NRPN, 66, syxBuf[106])
   parameterMap.set(1, PT_NRPN, 68, syxBuf[109])
   parameterMap.set(1, PT_NRPN, 70, make16(syxBuf[115], syxBuf[116]))
   parameterMap.set(1, PT_NRPN, 71, syxBuf[112])
   parameterMap.set(1, PT_NRPN, 72, make16(syxBuf[121], syxBuf[122]))
   parameterMap.set(1, PT_NRPN, 74, syxBuf[127])
   parameterMap.set(1, PT_NRPN, 67, (syxBuf[133] & 0x03))
   parameterMap.set(1, PT_NRPN, 69, (syxBuf[133] & 0x30) >> 4)
   parameterMap.set(1, PT_NRPN, 73, (syxBuf[133] & 0xC0) >> 6)

   -- Env 1 reset, freerun, loop, sus pedal
   parameterMap.set(1, PT_NRPN, 75, (syxBuf[130] & 0x10) >> 4)
   parameterMap.set(1, PT_NRPN, 76, (syxBuf[130] & 0x40) >> 6)
   parameterMap.set(1, PT_NRPN, 77, (syxBuf[130] + 1) & 0x03)
   parameterMap.set(1, PT_NRPN, 78, (syxBuf[130] & 0x08) >> 3)

   -- Env 2 Attack/Decay times, Sustain time/level, Release time, Vel -> E2, Attack/Decay/Release slopes
   parameterMap.set(1, PT_NRPN, 79, syxBuf[107])
   parameterMap.set(1, PT_NRPN, 81, syxBuf[110])
   parameterMap.set(1, PT_NRPN, 83, make16(syxBuf[117], syxBuf[118]))
   parameterMap.set(1, PT_NRPN, 84, syxBuf[113])
   parameterMap.set(1, PT_NRPN, 85, make16(syxBuf[123], syxBuf[124]))
   parameterMap.set(1, PT_NRPN, 87, syxBuf[128])
   parameterMap.set(1, PT_NRPN, 80, (syxBuf[134] & 0x03))
   parameterMap.set(1, PT_NRPN, 82, (syxBuf[134] & 0x30) >> 4)
   parameterMap.set(1, PT_NRPN, 86, (syxBuf[134] & 0xC0) >> 6)

   -- Env 2 reset, freerun, loop, sus pedal
   parameterMap.set(1, PT_NRPN, 88, (syxBuf[131] & 0x10) >> 4)
   parameterMap.set(1, PT_NRPN, 89, (syxBuf[131] & 0x40) >> 6)
   parameterMap.set(1, PT_NRPN, 90, (syxBuf[131] + 1) & 0x03)
   parameterMap.set(1, PT_NRPN, 91, (syxBuf[131] & 0x08) >> 3)

   -- Env 3 Attack/Decay times, Sustain time/level, Release time, Vel -> E3, Attack/Decay/Release slopes
   parameterMap.set(1, PT_NRPN, 92, syxBuf[108])
   parameterMap.set(1, PT_NRPN, 94, syxBuf[111])
   parameterMap.set(1, PT_NRPN, 96, make16(syxBuf[119], syxBuf[120]))
   parameterMap.set(1, PT_NRPN, 97, syxBuf[114])
   parameterMap.set(1, PT_NRPN, 98, make16(syxBuf[125], syxBuf[126]))
   parameterMap.set(1, PT_NRPN, 100, syxBuf[129])
   parameterMap.set(1, PT_NRPN, 93, (syxBuf[135] & 0x03))
   parameterMap.set(1, PT_NRPN, 95, (syxBuf[135] & 0x30) >> 4)
   parameterMap.set(1, PT_NRPN, 99, (syxBuf[135] & 0xC0) >> 6)

   -- Env 3 reset, freerun, loop, sus pedal
   parameterMap.set(1, PT_NRPN, 101, (syxBuf[132] & 0x10) >> 4)
   parameterMap.set(1, PT_NRPN, 102, (syxBuf[132] & 0x40) >> 6)
   parameterMap.set(1, PT_NRPN, 103, (syxBuf[132] + 1) & 0x03)
   parameterMap.set(1, PT_NRPN, 104, (syxBuf[132] & 0x08) >> 3)
end


function updLFOs(syxBuf)
   -- LFO 1 free rate, wheel 1 to LFO1 rate, tempo sync, sync rate, reset
   parameterMap.set(1, PT_NRPN, 106, make16(syxBuf[141], syxBuf[142]))
   parameterMap.set(1, PT_NRPN, 108, syxBuf[145])
   parameterMap.set(1, PT_NRPN, 105, (1 - (syxBuf[151] & 0x01)))
   parameterMap.set(1, PT_NRPN, 159, 24 - syxBuf[153])

   -- adjust last 3 reset positions
   local resetPos = (syxBuf[156] & 0x07)
   if resetPos == 4 then
      resetPos = 6
   elseif resetPos == 5 then
      resetPos = 4
   elseif resetPos == 6 then
      resetPos = 5
   end
   parameterMap.set(1, PT_NRPN, 107, resetPos)

   -- LFO 2 free rate, wheel 1 to LFO2 rate, tempo sync, sync rate, reset
   parameterMap.set(1, PT_NRPN, 110, make16(syxBuf[143], syxBuf[144]))
   parameterMap.set(1, PT_NRPN, 112, syxBuf[146])
   parameterMap.set(1, PT_NRPN, 109, (1 - ((syxBuf[152] & 0x04) >> 2)))
   parameterMap.set(1, PT_NRPN, 160, 24 - syxBuf[154])

   -- adjust last 3 reset positions
   local resetPos = ((syxBuf[156] & 0x70) >> 4)
   if resetPos == 4 then
      resetPos = 6
   elseif resetPos == 5 then
      resetPos = 4
   elseif resetPos == 6 then
      resetPos = 5
   end
   parameterMap.set(1, PT_NRPN, 111, resetPos)

   local shMap = {34, 35, 5, 23, 24, 25, 31, 4, 1, 2, 3, 9, 10, 13, 14, 7, 8, 11, 12, 17, 18, 21, 22, 15, 16, 19, 20, 30, 29, 27, 26, 32, 33, 28, 0, 0}
   local shInVal = 0
   
   if syxBuf[147] == 0x70 then
      shInVal = 6
   elseif syxBuf[147] > 34 then
      shInVal = syxBuf[147] + 1
   else
      shInVal = shMap[syxBuf[147]+1]
   end
   

   -- S/H rate, input, smoothing, tempo sync, sync rate, reset
   parameterMap.set(1, PT_NRPN, 114, make16(syxBuf[148], syxBuf[149]))
   parameterMap.set(1, PT_NRPN, 116, shInVal)
   parameterMap.set(1, PT_NRPN, 117, (syxBuf[151] & 0xFE) >> 1)
   parameterMap.set(1, PT_NRPN, 113, (1 - ((syxBuf[152] & 0x10) >> 4)))
   parameterMap.set(1, PT_NRPN, 161, 24 - syxBuf[155])

   -- adjust last 3 reset positions
   local resetPos = syxBuf[150]
   if resetPos == 4 then
      resetPos = 6
   elseif resetPos == 5 then
      resetPos = 4
   elseif resetPos == 6 then
      resetPos = 5
   end
   parameterMap.set(1, PT_NRPN, 115, resetPos)
end


function updModMatrix(syxBuf)
   local srcMap = {0, 36, 37, 6, 24, 25, 26, 33, 5, 2, 3, 4, 10, 11, 14, 15, 8, 9, 12, 13, 18, 19, 22, 23, 16, 17, 20, 21, 32, 31, 30, 28, 27, 34, 35, 29, 1, 0}
   local srcVal = 0
   local dstMap = {0, 1, 4, 7, 10, 5, 8, 11, 6, 9, 12, 3}
   local dstVal = 0
   
    for i=0,11 do
      -- map source values as needed
      srcVal = syxBuf[168+i]
      if srcVal == 0x72 then
         srcVal = 7
      elseif srcVal > 36 then
         srcVal = srcVal + 1
      else
         srcVal = srcMap[srcVal+1]
      end

      -- map destination values as needed (no 0x32, no 0x49)
      dstVal = syxBuf[180+i]
      if dstVal == 0x4F then
         dstVal = 2
      elseif dstVal == 0x33 then
         dstVal = 44
      elseif dstVal < 0x0C then
         dstVal = dstMap[dstVal+1]
      elseif (dstVal >= 0x0C) and (dstVal < 0x23) then
         dstVal = dstVal + 1
      elseif (dstVal >= 0x23) and (dstVal < 0x2A) then
         dstVal = dstVal + 36
      elseif (dstVal >= 0x2A) and (dstVal < 0x32) then
         dstVal = dstVal - 6
      elseif (dstVal >= 0x34) and (dstVal < 0x49) then
         dstVal = dstVal - 2
      elseif (dstVal >= 0x4A) and (dstVal < 0x4F) then
         dstVal = dstVal - 29
      end

      parameterMap.set(1, PT_NRPN, 180+(i*4), srcVal)
      parameterMap.set(1, PT_NRPN, 181+(i*4), dstVal)
      parameterMap.set(1, PT_NRPN, 182+(i*4), make16(syxBuf[192+(i*2)], syxBuf[193+(i*2)]))
      parameterMap.set(1, PT_NRPN, 183+(i*4), make16(syxBuf[216+(i*2)], syxBuf[217+(i*2)]))
   end
end


function updTrackingGen(syxBuf)
   local tgMap = {33, 34, 5, 23, 24, 25, 32, 4, 1, 2, 3, 9, 10, 13, 14, 7, 8, 11, 12, 17, 18, 21, 22, 15, 16, 19, 20, 31, 30, 29, 27, 26, 28, 0}
   local tgVal = 0
   
   if syxBuf[240] == 0x6F then
      tgVal = 6
   elseif syxBuf[240] > 33 then
      tgVal = syxBuf[240] + 1
   else
      tgVal = tgMap[syxBuf[240]+1]
   end

   -- Tracking Generator input, preset, grid points
   parameterMap.set(1, PT_NRPN, 118, tgVal)
   parameterMap.set(1, PT_NRPN, 119, syxBuf[275])

   local toggle = syxBuf[241]
   parameterMap.set(1, PT_NRPN, 120, toggle)

   local numPtsCtrl = controls.get(165)
   local numPtsValObj = numPtsCtrl:getValue("value")
   numPoints(numPtsValObj, toggle)


   -- Tracking Generator points -16 .. 0 .. +16
   local bufNum = 242
   for i=121, 133 do
      parameterMap.set(1, PT_NRPN, i, decode100(syxBuf[bufNum]))
      bufNum = bufNum + 1
   end
   for i=390, 409 do
      parameterMap.set(1, PT_NRPN, i, decode100(syxBuf[bufNum]))
      bufNum = bufNum + 1
   end
end


--  
-- Formatter and Value display functions
--  

function swapFilterCtrl(valueObject, value)
   local control = valueObject:getControl ()
   local absCtrl = controls.get(20)
   local offCtrl = controls.get(18)

   if (value == 0) then
      control:setName("Offset to Filt1")
      absCtrl:setSlot(18)
      absCtrl:setVisible(false)
      offCtrl:setSlot(20)
      offCtrl:setVisible(true)
   else
      control:setName("Absolute")
      absCtrl:setSlot(20)
      absCtrl:setVisible(true)
      offCtrl:setSlot(18)
      offCtrl:setVisible(false)
   end
end

function numPoints(valueObject, value)
   local control = valueObject:getControl ()
   local isVis

   if (control:getName() == "12 Points") or (control:getName() == "16 Points") then
      if (value == 0) then
         control:setName("12 Points")
         isVis = false
      else
         control:setName("16 Points")
         isVis = true
      end

      for i=166,169 do
         negPtCtrl = controls.get(i)
         negPtCtrl:setVisible(isVis)
         posPtCtrl = controls.get(i+29)
         posPtCtrl:setVisible(isVis)
      end
   end
end


function addPercent(valueObject, value)
   return (string.format ("%d%%", value))
end

function cvtPitchFine(valueObject, value)
   return (string.format("%f", value/10))
end


function cvtFXBalance(valueObject, value)
   return (string.format("%d %% f1", (50 - value)))
end

function cvtHertz(valueObject, value)
   if (value >= 1000) then
      return (string.format("%.3f KHz", value/1000))
   else 
      return (string.format("%.3f Hz", value))
   end  
end

